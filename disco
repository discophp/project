#!/usr/bin/php


<?php

$_SERVER['DOCUMENT_ROOT'] = __DIR__."/public/";

require('vendor/autoload.php');

$app = Disco\classes\App::instance();
$app->setUp();


if(isset($argv[1])){

    switch($argv[1]){

        case 'resolve':
            Disco\manage\Manager::resolve($argv[2],$argv[3],$argv[4],$argv[5],$argv[6]);
            break;

        case 'post-install-cmd':
            Disco\manage\Manager::install();
            break;

        case 'jobs':
            Disco\manage\Manager::jobs();
            break;

        case 'kill-job':
            Queue::killJob($argv[2]);
            break;

        case 'gen':
            if($argv[2]=='aes'){
                $r = Disco\manage\Manager::genAES256Key();
                if(isset($argv[3]) && $argv[3]=='set'){
                    Disco\manage\Manager::setAES256Key($r);
                    echo 'AES_KEY256 now set to : '.$r.PHP_EOL;
                }//if
                else {
                    echo $r.PHP_EOL;
                }//el
            }//if
            else if($argv[2]=='sha'){
                if(empty($argv[3])){
                    echo 'You must specify a length for the SHA512 salt'.PHP_EOL;
                    exit;
                }//if

                $s = Disco\manage\Manager::genSalt($argv[3]);

                if(!empty($argv[4]) && $argv[4]=='set-lead'){
                    Disco\manage\Manager::setSaltLead($s);
                    echo 'SHA512_SALT_LEAD now set to : '.$s.PHP_EOL;
                }//if
                else if(!empty($argv[4]) && $argv[4]=='set-tail'){
                    Disco\manage\Manager::setSaltTail($s);
                    echo 'SHA512_SALT_TAIL now set to : '.$s.PHP_EOL;
                }//if
                else {
                    echo $s.PHP_EOL;
                }//el

            }//elif

            break;

        case 'with':
            $vars=Array();
            $i=4;
            while(!empty($argv[$i])){
                $vars[]=$argv[$i];
                $i++;
            }//while

            $argv[2] = $app->with($argv[2]);

            var_dump(call_user_func_array(Array($argv[2],$argv[3]),$vars));
            break;

        case 'mysql':
            echo $app['DB']->host_info.PHP_EOL;
            echo $app['DB']->server_info.PHP_EOL;
            echo $app['DB']->stat.PHP_EOL.PHP_EOL;
            break;

        case 'mode':

            if(empty($argv[2])){
                $mode = Disco\manage\Manager::appMode();
                echo 'APP_MODE : '.$mode.PHP_EOL;
                exit;
            }//if
            else if($argv[2]!='DEV' && $argv[2]!='PROD'){
                echo 'Mode takes one of two values: DEV | PROD'.PHP_EOL.'Please supply a correct value'.PHP_EOL;
                exit;
            }//if

            Disco\manage\Manager::appMode($argv[2]);
            echo 'APP_MODE now set to: '.$argv[2].PHP_EOL;

            break;

        case 'maintenance-mode':

            if(empty($argv[2])){
                $mode = Disco\manage\Manager::maintenanceMode();
                if($mode=='YES'){
                    echo 'MAINTENANCE_MODE : ON'.PHP_EOL;
                }//if
                else {
                    echo 'MAINTENANCE_MODE : OFF'.PHP_EOL;
                }//el
                exit;
            }//if
            else if($argv[2]!='YES' && $argv[2]!='NO'){
                echo 'Maintenance Mode takes one of two values: YES | NO '.PHP_EOL.'Please supply a correct value'.PHP_EOL;
                exit;
            }//if

            Disco\manage\Manager::maintenanceMode($argv[2]);
            echo 'MAINTENANCE_MODE now set to: '.$argv[2].PHP_EOL;
            if($argv[2]=='YES'){
                echo 'Users will being seeing the result of the file'.PHP_EOL.' -  app/maintenance.php'.PHP_EOL;
            }//if
            break;

        case 'db-backup':

            $path = '/app/db/';
            if(isset($argv[2])){
                $path = $argv[2];
            }//if

            $fileName = \App::config('DB_DB');
            if(isset($argv[3])){
                $fileName = $argv[3];
            }//if

            $path = \App::path().$path;

            if(!is_dir($path)){
                echo 'Directory '.$path.' does not exsist, exiting.'.PHP_EOL;
                exit;
            }//if

            $outputPath = $path . $fileName . '.sql';

            if(is_file($outputPath)){
                echo "Backup file `{$outputPath}` already exists, would you like to overwrite it?";
                if(!disco_console_question()){
                    break;
                }//if
            }//if

            try {

                $connect = sprintf("%1\$s:host=%2\$s;dbname=%3\$s",
                        \App::config('DB_ENGINE'),
                        \App::config('DB_HOST'),
                        \App::config('DB_DB')
                    );

                $settings = Array('add-drop-table' => true);

                $dump = new \Ifsnop\Mysqldump\Mysqldump($connect, \App::config('DB_USER'), \App::config('DB_PASSWORD'), $settings);
                $dump->start($outputPath);

                echo 'Dump complete!' . PHP_EOL;

            } catch (\Exception $e) {
                var_dump($e->getMessage());
                exit;
            }//catch

            break;

        case 'db-backup-structure':

            $path = '/app/db/';
            if(isset($argv[2])){
                $path = $argv[2];
            }//if

            $fileName = \App::config('DB_DB') . '_STRUCTURE';
            if(isset($argv[3])){
                $fileName = $argv[3];
            }//if

            $path = \App::path().$path;

            if(!is_dir($path)){
                echo 'Directory '.$path.' does not exsist, exiting.'.PHP_EOL;
                exit;
            }//if

            $outputPath = $path . $fileName . '.sql';

            if(is_file($outputPath)){
                echo "Backup structure file `{$outputPath}` already exists, would you like to overwrite it?";
                if(!disco_console_question()){
                    break;
                }//if
            }//if

            try {

                $connect = sprintf("%1\$s:host=%2\$s;dbname=%3\$s",
                        \App::config('DB_ENGINE'),
                        \App::config('DB_HOST'),
                        \App::config('DB_DB')
                    );

                $settings = Array('no-data' => true, 'add-drop-table' => true);

                $dump = new \Ifsnop\Mysqldump\Mysqldump($connect, \App::config('DB_USER'), \App::config('DB_PASSWORD'), $settings);
                $dump->start($outputPath);

                echo 'Dump structure complete!' . PHP_EOL;

            } catch (\Exception $e) {
                var_dump($e->getMessage());
                exit;
            }//catch

            break;

        case 'db-restore':

            $path = '/app/db/';
            if(isset($argv[2])){
                $path = $argv[2];
            }//if

            $path = \App::path().$path;

            $fileName = \App::config('DB_DB');
            if(isset($argv[3])){
                $fileName = $argv[3];
            }//if

            if(!is_dir($path)){
                echo 'Directory '.$path.' does not exsist, exiting.'.PHP_EOL;
                exit;
            }//if

            $e = "mysql -u %1\$s -p'%2\$s' -h %3\$s %4\$s < %5\$s%6\$s.sql;";
            $e = sprintf($e,
                \App::config('DB_USER'),
                \App::config('DB_PASSWORD'),
                \App::config('DB_HOST'),
                \App::config('DB_DB'),
                $path,
                $fileName
            );

            echo exec($e) . PHP_EOL;
            echo 'Database restored!' . PHP_EOL;
            break;

        case 'db-restore-structure':

            $path = '/app/db/';
            if(isset($argv[2])){
                $path = $argv[2];
            }//if

            $path = \App::path().$path;

            $fileName = \App::config('DB_DB') . '_STRUCTURE';
            if(isset($argv[3])){
                $fileName = $argv[3];
            }//if

            if(!is_dir($path)){
                echo 'Directory '.$path.' does not exsist, exiting.'.PHP_EOL;
                exit;
            }//if

            $e = "mysql -u %1\$s -p'%2\$s' -h %3\$s %4\$s < %5\$s%6\$s.sql;";
            $e = sprintf($e,
                \App::config('DB_USER'),
                \App::config('DB_PASSWORD'),
                \App::config('DB_HOST'),
                \App::config('DB_DB'),
                $path,
                $fileName
            );

            echo exec($e) . PHP_EOL;
            echo 'Database Structure restored!' . PHP_EOL;
            break;


        case 'create':
            if($argv[2] == 'model'){
                if(!isset($argv[3])){
                    echo 'You must specify a table to build the model from'.PHP_EOL;
                    exit;
                }//if
                $table = $argv[3];
                $template_path = isset($argv[4]) ? $argv[4] : 'app/config/model.format';
                $output_path = isset($argv[5]) ? $argv[5] : 'app/model/';

                if($table=='all'){

                    $result = getDBSchema();

                    while($row = $result->fetch()){
                        $model = Disco\manage\Manager::buildModel($row['table_name']);
                        if($output_path && $template_path){
                            Disco\manage\Manager::writeModel($row['table_name'],$model,$template_path,$output_path);
                        } else {
                            var_dump($record);
                        }//el
                    }//while

                }//if
                else {
                    $model = Disco\manage\Manager::buildModel($table);
                    if($output_path && $template_path){
                        Disco\manage\Manager::writeModel($table,$model,$template_path,$output_path);
                    } else {
                        var_dump($model);
                    }//el
                }//el

            }//if
            else if($argv[2] == 'record'){

                if(!isset($argv[3])){
                    echo 'You must specify a table to build the record from'.PHP_EOL;
                    exit;
                }//if

                $table = $argv[3];

                $template_path = isset($argv[4]) ? $argv[4] : 'app/config/record.format';
                $output_path = isset($argv[5]) ? $argv[5] : 'app/record/';

                if($table=='all'){
                    $result = getDBSchema();
                    while($row = $result->fetch()){
                        $record = Disco\manage\Manager::buildRecord($row['table_name']);
                        if($output_path && $template_path){
                            Disco\manage\Manager::writeRecord($row['table_name'],$record,$template_path,$output_path);
                        } else {
                            var_dump($record);
                        }//el

                    }//while

                }//if
                else {
                    $record = Disco\manage\Manager::buildRecord($table);
                    if($output_path && $template_path){
                        Disco\manage\Manager::writeRecord($table,$record,$template_path,$output_path);
                    } else {
                        var_dump($record);
                    }//el
                }//el

            }//elif
            break;

        case 'routes':
            $_SERVER['REQUEST_METHOD'] = 'GET';
            $_SERVER['REQUEST_URI'] = '/1093489sdker';
            Disco\manage\Manager::routes($argv[2]);
            break;


        case 'unit-tests':
            //system('php vendor/phpunit/phpunit/phpunit --bootstrap vendor/discophp/framework/test/autoload.php --colors vendor/discophp/framework/test/unit/classes/ 2>&1').PHP_EOL;
            system('php vendor/phpunit/phpunit/phpunit --no-globals-backup --bootstrap vendor/discophp/framework/test/autoload.php --colors vendor/discophp/framework/test/unit/ 2>&1').PHP_EOL;
            break;

    }//switch
}//if



function getDBSchema(){

    return DB::query('
        SELECT table_name 
        FROM information_schema.tables
        WHERE table_type="BASE TABLE" AND table_schema="'.\App::config('DB_DB').'"
    ');

}//getDBSchema


function disco_console_question(){
    exec('
    while true; do
        read -p "Y/N?" yn
        case $yn in
            [Yy]* ) echo "Y"; break;;
            [Nn]* ) echo "N"; break;;
        esac
    done
        ',
        $answer
    );

    if($answer[0] != 'N'){
        return true;
    }//if

    return false;
}//disco_console_question


?>
